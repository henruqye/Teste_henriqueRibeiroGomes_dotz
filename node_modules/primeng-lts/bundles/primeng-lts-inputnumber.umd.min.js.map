{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/inputnumber/inputnumber.ts"],"names":["Object","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","INPUTNUMBER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputNumber","multi","el","cd","this","showButtons","format","buttonLayout","incrementButtonIcon","decrementButtonIcon","step","onInput","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","groupChar","prefixChar","suffixChar","_modeOption","_useGroupingOption","defineProperty","prototype","_localeOption","localeOption","updateConstructParser","_disabled","disabled","focused","timer","clearTimer","_localeMatcherOption","localeMatcherOption","modeOption","_currencyOption","currencyOption","_currencyDisplayOption","currencyDisplayOption","useGroupingOption","_minFractionDigitsOption","minFractionDigitsOption","_maxFractionDigitsOption","maxFractionDigitsOption","_prefixOption","prefixOption","_suffixOption","suffixOption","ngOnInit","constructParser","initialized","getOptions","localeMatcher","style","mode","currency","currencyDisplay","useGrouping","minimumFractionDigits","minFractionDigits","maximumFractionDigits","maxFractionDigits","numberFormat","Intl","NumberFormat","locale","numerals","arguments","length","concat","__spread","reverse","index","Map","map","d","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","getSuffixExpression","_prefix","getPrefixExpression","_index","get","escapeRegExp","text","replace","formatter","trim","charAt","prefix","split","suffix","formatValue","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","setTimeout","spin","currentValue","input","nativeElement","newValue","validateValue","maxlength","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyDown","keyCode","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","isNumeralChar","deleteChar","decimalCharIndex","search","lastIndex","test","slice","setSelectionRange","updateValue","deleteRange","onInputKeyPress","code","char","String","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","sign","minusCharIndex","insertText","resolvedOptions","operation","start","end","initCursor","valueLength","onInputClick","resetRegex","valueStr","insertedValueStr","isValueChanged","emit","originalEvent","min","max","currentLength","newLength","startValue","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","setAttribute","onInputFocus","onInputBlur","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","clearInterval","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","encapsulation","ViewEncapsulation","None","host","[class.p-inputwrapper-filled]","[class.p-inputwrapper-focus]","ElementRef","ChangeDetectorRef","Input","ViewChild","Output","NgModule","imports","CommonModule","InputTextModule","ButtonModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng-lts/inputtext';\nimport { ButtonModule } from 'primeng-lts/button';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\n@Component({\n    selector: 'p-inputNumber',\n    template: `\n        <span [ngClass]=\"{'p-inputnumber p-component': true,'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal', 'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\"\n                [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [ngClass]=\"'p-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"p-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [INPUTNUMBER_VALUE_ACCESSOR],\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./inputnumber.css'],\n    host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focused'\n    }\n})\nexport class InputNumber implements OnInit,ControlValueAccessor {\n\n    @Input() showButtons: boolean = false;\n\n    @Input() format: boolean = true;\n\n    @Input() buttonLayout: string = \"stacked\";\n\n    @Input() inputId: string;\n\n    @Input() styleClass: string;\n\n    @Input() style: any;\n\n    @Input() placeholder: string;\n\n    @Input() size: number;\n\n    @Input() maxlength: number;\n\n    @Input() tabindex: string;\n\n    @Input() title: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaRequired: boolean;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() autocomplete: string;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() incrementButtonClass: string;\n\n    @Input() decrementButtonClass: string;\n\n    @Input() incrementButtonIcon: string = 'pi pi-angle-up';\n\n    @Input() decrementButtonIcon: string = 'pi pi-angle-down';\n\n    @Input() step: number = 1;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @ViewChild('input') input: ElementRef;\n\n    @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    value: number;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    focused: boolean;\n\n    initialized: boolean;\n\n    groupChar: string = '';\n\n    prefixChar: string = '';\n\n    suffixChar: string = '';\n\n    isSpecialChar: boolean;\n\n    timer: any;\n\n    lastValue: string;\n\n    _numeral: any;\n\n    numberFormat: any;\n\n    _decimal: any;\n\n    _group: any;\n\n    _minusSign: any;\n\n    _currency: any;\n\n    _prefix: any;\n\n    _suffix: any;\n\n    _index: any;\n\n    _localeOption: string;\n\n    _localeMatcherOption: string;\n\n    _modeOption: string = \"decimal\";\n\n    _currencyOption: string;\n\n    _currencyDisplayOption: string;\n\n    _useGroupingOption: boolean = true;\n\n    _minFractionDigitsOption: number;\n\n    _maxFractionDigitsOption: number;\n\n    _prefixOption: string;\n\n    _suffixOption: string;\n\n    _disabled: boolean;\n\n    @Input() get locale(): string {\n        return this._localeOption;\n    }\n\n    set locale(localeOption: string) {\n        this._localeOption = localeOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(disabled: boolean) {\n        if (disabled)\n            this.focused = false;\n\n        this._disabled = disabled;\n\n        if (this.timer)\n            this.clearTimer();\n    }\n\n    @Input() get localeMatcher(): string {\n        return this._localeMatcherOption;\n    }\n\n    set localeMatcher(localeMatcherOption: string) {\n        this._localeMatcherOption = localeMatcherOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get mode(): string {\n        return this._modeOption;\n    }\n\n    set mode(modeOption: string) {\n        this._modeOption = modeOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get currency(): string {\n        return this._currencyOption;\n    }\n\n    set currency(currencyOption: string) {\n        this._currencyOption = currencyOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get currencyDisplay(): string {\n        return this._currencyDisplayOption;\n    }\n\n    set currencyDisplay(currencyDisplayOption: string) {\n        this._currencyDisplayOption = currencyDisplayOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get useGrouping(): boolean {\n        return this._useGroupingOption;\n    }\n\n    set useGrouping(useGroupingOption: boolean) {\n        this._useGroupingOption = useGroupingOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get minFractionDigits(): number {\n        return this._minFractionDigitsOption;\n    }\n\n    set minFractionDigits(minFractionDigitsOption: number) {\n        this._minFractionDigitsOption = minFractionDigitsOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get maxFractionDigits(): number {\n        return this._maxFractionDigitsOption;\n    }\n\n    set maxFractionDigits(maxFractionDigitsOption: number) {\n        this._maxFractionDigitsOption = maxFractionDigitsOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get prefix(): string {\n        return this._prefixOption;\n    }\n\n    set prefix(prefixOption: string) {\n        this._prefixOption = prefixOption;\n        this.updateConstructParser();\n    }\n\n    @Input() get suffix(): string {\n        return this._suffixOption;\n    }\n\n    set suffix(suffixOption: string) {\n        this._suffixOption = suffixOption;\n        this.updateConstructParser();\n    }\n\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) { }\n\n    ngOnInit() {\n        this.constructParser();\n\n        this.initialized = true;\n    }\n\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n\n    constructParser() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = this.getSuffixExpression();\n        this._prefix = this.getPrefixExpression();\n        this._index = d => index.get(d);\n    }\n\n    updateConstructParser() {\n        if (this.initialized) {\n            this.constructParser();\n        }\n    }\n\n    escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n        return new RegExp(`[${this.groupChar}]`, 'g');\n    }\n\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n\n        return new RegExp(`[]`,'g');\n    }\n\n    getPrefixExpression() {\n        if (this.prefix) {\n            this.prefixChar = this.prefix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\n            this.prefixChar = formatter.format(1).split('1')[0];\n        }\n\n        return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\n    }\n\n    getSuffixExpression() {\n        if (this.suffix) {\n            this.suffixChar = this.suffix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                minimumFractionDigits: 0, maximumFractionDigits: 0});\n            this.suffixChar = formatter.format(1).split('1')[1];\n        }\n\n        return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            if (value === '-') { // Minus sign\n                return value;\n            }\n\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n\n                return formattedValue;\n            }\n\n            return value.toString();\n        }\n\n        return '';\n    }\n\n    parseValue(text) {\n        let filteredText = text\n                            .replace(this._suffix, '')\n                            .replace(this._prefix, '')\n                            .trim()\n                            .replace(/\\s/g, '')\n                            .replace(this._currency, '')\n                            .replace(this._group, '')\n                            .replace(this._minusSign, '-')\n                            .replace(this._decimal, '.')\n                            .replace(this._numeral, this._index);\n\n        if (filteredText) {\n            if (filteredText === '-') // Minus sign\n                return filteredText;\n\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n    }\n\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n\n        this.handleOnInput(event, currentValue, newValue);\n    }\n\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n\n    onUserInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n        let newValueStr = null;\n\n        if (event.altKey) {\n            event.preventDefault();\n        }\n\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n            break;\n\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n            break;\n\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //backspace\n            case 8: {\n                event.preventDefault();\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n\n                    this.updateValue(event, newValueStr, null, 'delete-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n\n                break;\n            }\n\n            // del\n            case 46:\n                event.preventDefault();\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                        }\n                    }\n\n                    this.updateValue(event, newValueStr, null, 'delete-back-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n            break;\n\n            default:\n            break;\n        }\n    }\n\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n        const isDecimalSign = this.isDecimalSign(char);\n        const isMinusSign = this.isMinusSign(char);\n\n        if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n            this.insert(event, char, { isDecimalSign, isMinusSign });\n        }\n    }\n\n    onPaste(event) {\n        if (!this.disabled) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        }\n    }\n\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    isDecimalSign(char) {\n        if (this._decimal.test(char)) {\n            this._decimal.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        const decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        const minusCharIndex = inputValue.search(this._minusSign);\n        this._minusSign.lastIndex = 0;\n        let newValueStr;\n\n        if (sign.isMinusSign) {\n            if (selectionStart === 0) {\n                newValueStr = inputValue;\n                if (minusCharIndex === -1 || selectionEnd !== 0) {\n                    newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                }\n\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else if (sign.isDecimalSign) {\n            if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                this.updateValue(event, inputValue, text, 'insert');\n            }\n            else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else {\n            const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n            const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n            if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                    newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n            else {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, operation);\n            }\n        }\n    }\n\n    insertText(value, text, start, end) {\n        let textSplit = text.split('.');\n\n        if (textSplit.length == 2) {\n            const decimalCharIndex = value.slice(start, end).search(this._decimal);\n            this._decimal.lastIndex = 0;\n            return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\n        }\n        else if ((end - start) === value.length) {\n            return this.formatValue(text);\n        }\n        else if (start === 0) {\n            return text + value.slice(end);\n        }\n        else if (end === value.length) {\n            return value.slice(0, start) + text;\n        }\n        else {\n            return value.slice(0, start) + text + value.slice(end);\n        }\n    }\n\n    deleteRange(value, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n\n        return newValueStr;\n    }\n\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n\n    onInputClick() {\n        this.initCursor();\n    }\n\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n\n        return false;\n    }\n\n    resetRegex() {\n        this._numeral.lastIndex =  0;\n        this._decimal.lastIndex =  0;\n        this._group.lastIndex =  0;\n        this._minusSign.lastIndex =  0;\n    }\n\n    updateValue(event, valueStr, insertedValueStr, operation) {\n        let currentValue = this.input.nativeElement.value;\n        let newValue = null;\n\n        if (valueStr != null) {\n            newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, insertedValueStr, operation);\n        }\n\n        this.handleOnInput(event, currentValue, newValue);\n    }\n\n    handleOnInput(event, currentValue, newValue) {\n        if (this.isValueChanged(currentValue, newValue)) {\n            this.onInput.emit({ originalEvent: event, value: newValue });\n        }\n    }\n\n    isValueChanged(currentValue, newValue) {\n        if (newValue === null && currentValue !== null) {\n            return true;\n        }\n\n        if (newValue != null) {\n            let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n            return newValue !== parsedCurrentValue;\n        }\n\n        return false;\n    }\n\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n\n        if (value === '-') { // Minus sign\n            return null;\n        }\n\n        return value;\n    }\n\n    updateInput(value, insertedValueStr, operation) {\n        insertedValueStr = insertedValueStr || '';\n\n        let inputValue = this.input.nativeElement.value;\n        let newValue = this.formatValue(value);\n        let currentLength = inputValue.length;\n\n        if (currentLength === 0) {\n            this.input.nativeElement.value = newValue;\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            const prefixLength = (this.prefixChar || '').length;\n            const selectionEnd = prefixLength + insertedValueStr.length;\n            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionStart;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            if (this.maxlength && this.maxlength < newValue.length) {\n                return;\n            }\n\n            this.input.nativeElement.value = newValue;\n            let newLength = newValue.length;\n\n            if (operation === 'range-insert') {\n                const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                const startValueStr = startValue !== null ? startValue.toString() : '';\n                const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                const sRegex = new RegExp(startExpr, 'g');\n                sRegex.test(newValue);\n\n                const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                const tRegex = new RegExp(tExpr, 'g');\n                tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (newLength === currentLength) {\n                if (operation === 'insert' || operation === 'delete-back-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range' || operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (operation === 'delete-back-single') {\n                let prevChar = inputValue.charAt(selectionEnd - 1);\n                let nextChar = inputValue.charAt(selectionEnd);\n                let diff = currentLength - newLength;\n                let isGroupChar = this._group.test(nextChar);\n\n                if (isGroupChar && diff === 1) {\n                    selectionEnd += 1;\n                }\n                else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                    selectionEnd += (-1 * diff) + 1;\n                }\n\n                this._group.lastIndex = 0;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n\n        this.onBlur.emit(event);\n    }\n\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n\n    updateModel(event, value) {\n        if (this.value !== value) {\n            this.value = value;\n            this.onModelChange(value);\n        }\n\n        this.onModelTouched();\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    get filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule, ButtonModule],\n    exports: [InputNumber],\n    declarations: [InputNumber]\n})\nexport class InputNumberModule { }\n"]}