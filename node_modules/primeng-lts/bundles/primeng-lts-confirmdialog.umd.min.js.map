{"version":3,"sources":["../../src/app/components/confirmdialog/confirmdialog.ts"],"names":["showAnimation","animation","style","transform","opacity","animate","hideAnimation","ConfirmDialog","el","renderer","confirmationService","zone","cd","_this","this","acceptIcon","acceptLabel","acceptVisible","rejectIcon","rejectLabel","rejectVisible","closeOnEscape","blockScroll","closable","autoZIndex","baseZIndex","transitionOptions","focusTrap","defaultFocus","_position","transformOptions","subscription","requireConfirmation$","subscribe","confirmation","key","confirmationOptions","message","icon","header","acceptButtonStyleClass","rejectButtonStyleClass","dismissableMask","accept","acceptEvent","EventEmitter","reject","rejectEvent","visible","hide","Object","defineProperty","prototype","_visible","value","maskVisible","markForCheck","ngAfterContentInit","templates","forEach","item","getType","footerTemplate","template","option","name","source","hasOwnProperty","onAnimationStart","event","toState","container","element","wrapper","parentElement","contentContainer","DomHandler","findSingle","getElementToFocus","focus","appendContainer","moveOnTop","bindGlobalListeners","enableModality","onAnimationEnd","onOverlayHide","appendTo","document","body","appendChild","restoreAppend","nativeElement","addClass","maskClickListener","listen","isSameNode","target","close","disableModality","removeClass","unbindMaskClickListener","detectChanges","emit","preventDefault","zIndex","String","zindex","getMaskClass","maskClass","p-dialog-mask p-component-overlay","p-dialog-mask-scrollblocker","getPositionClass","toString","pos","find","position","documentEscapeListener","documentTarget","ownerDocument","which","parseInt","focusableElements","getFocusableElements","length","activeElement","focusedIndex","indexOf","shiftKey","unbindGlobalListeners","ngOnDestroy","unsubscribe","Component","args","selector","animations","trigger","transition","useAnimation","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ConfirmationService","NgZone","ChangeDetectorRef","Input","ContentChild","Footer","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnDestroy,Input,EventEmitter,Renderer2,ContentChild,NgZone,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, TemplateRef, AfterContentInit} from '@angular/core';\nimport {trigger,style,transition,animate,AnimationEvent, useAnimation, animation} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng-lts/dom';\nimport {Footer,SharedModule, PrimeTemplate} from 'primeng-lts/api';\nimport {ButtonModule} from 'primeng-lts/button';\nimport {Confirmation} from 'primeng-lts/api';\nimport {ConfirmationService} from 'primeng-lts/api';\nimport {Subscription} from 'rxjs';\n\nconst showAnimation = animation([\n    style({ transform: '{{transform}}', opacity: 0 }),\n    animate('{{transition}}', style({ transform: 'none', opacity: 1 }))\n]);\n\nconst hideAnimation = animation([\n    animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 }))\n]);\n\n@Component({\n    selector: 'p-confirmDialog',\n    template: `\n        <div [class]=\"maskStyleClass\" [ngClass]=\"getMaskClass()\" *ngIf=\"maskVisible\">\n            <div [ngClass]=\"{'p-dialog p-confirm-dialog p-component':true,'p-dialog-rtl':rtl}\" [ngStyle]=\"style\" [class]=\"styleClass\" (mousedown)=\"moveOnTop()\"\n                [@animation]=\"{value: 'visible', params: {transform: transformOptions, transition: transitionOptions}}\" (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\" *ngIf=\"visible\">\n                <div class=\"p-dialog-header\">\n                    <span class=\"p-dialog-title\" *ngIf=\"option('header')\">{{option('header')}}</span>\n                    <div class=\"p-dialog-header-icons\">\n                        <button *ngIf=\"closable\" type=\"button\" [ngClass]=\"{'p-dialog-header-icon p-dialog-header-close p-link':true}\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                            <span class=\"pi pi-times\"></span>\n                        </button>\n                    </div>\n                </div>\n                <div #content class=\"p-dialog-content\">\n                    <i [ngClass]=\"'p-confirm-dialog-icon'\" [class]=\"option('icon')\" *ngIf=\"option('icon')\"></i>\n                    <span class=\"p-confirm-dialog-message\" [innerHTML]=\"option('message')\"></span>\n                </div>\n                <div class=\"p-dialog-footer\" *ngIf=\"footer || footerTemplate\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                    <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n                </div>\n                <div class=\"p-dialog-footer\" *ngIf=\"!footer\">\n                    <button type=\"button\" pButton [icon]=\"option('acceptIcon')\" [label]=\"option('acceptLabel')\" (click)=\"accept()\" [ngClass]=\"'p-confirm-dialog-accept'\" [class]=\"option('acceptButtonStyleClass')\" *ngIf=\"option('acceptVisible')\" [attr.aria-label]=\"acceptAriaLabel\"></button>\n                    <button type=\"button\" pButton [icon]=\"option('rejectIcon')\" [label]=\"option('rejectLabel')\" (click)=\"reject()\" [ngClass]=\"'p-confirm-dialog-reject'\" [class]=\"option('rejectButtonStyleClass')\" *ngIf=\"option('rejectVisible')\" [attr.aria-label]=\"rejectAriaLabel\"></button>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('animation', [\n            transition('void => visible', [\n                useAnimation(showAnimation)\n            ]),\n            transition('visible => void', [\n                useAnimation(hideAnimation)\n            ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['../dialog/dialog.css']\n})\nexport class ConfirmDialog implements AfterContentInit,OnDestroy {\n\n    @Input() header: string;\n\n    @Input() icon: string;\n\n    @Input() message: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() maskStyleClass: string;\n\n    @Input() acceptIcon: string = 'pi pi-check';\n\n    @Input() acceptLabel: string = 'Yes';\n\n    @Input() acceptAriaLabel: string;\n\n    @Input() acceptVisible: boolean = true;\n\n    @Input() rejectIcon: string = 'pi pi-times';\n\n    @Input() rejectLabel: string = 'No';\n\n    @Input() rejectAriaLabel: string;\n\n    @Input() rejectVisible: boolean = true;\n\n    @Input() acceptButtonStyleClass: string;\n\n    @Input() rejectButtonStyleClass: string;\n\n    @Input() closeOnEscape: boolean = true;\n\n    @Input() dismissableMask: boolean;\n\n    @Input() blockScroll: boolean = true;\n\n    @Input() rtl: boolean;\n\n    @Input() closable: boolean = true;\n\n    @Input() appendTo: any;\n\n    @Input() key: string;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() transitionOptions: string = '150ms cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() focusTrap: boolean = true;\n\n    @Input() defaultFocus: string = 'accept';\n\n    @Input() get visible(): any {\n        return this._visible;\n    }\n    set visible(value:any) {\n        this._visible = value;\n\n        if (this._visible && !this.maskVisible) {\n            this.maskVisible = true;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    @Input() get position(): string {\n        return this._position;\n    };\n\n    set position(value: string) {\n        this._position = value;\n\n        switch (value) {\n            case 'top-left':\n            case 'bottom-left':\n            case 'left':\n                this.transformOptions = \"translate3d(-100%, 0px, 0px)\";\n            break;\n            case 'top-right':\n            case 'bottom-right':\n            case 'right':\n                this.transformOptions = \"translate3d(100%, 0px, 0px)\";\n            break;\n            case 'bottom':\n                this.transformOptions = \"translate3d(0px, 100%, 0px)\";\n            break;\n            case 'top':\n                this.transformOptions = \"translate3d(0px, -100%, 0px)\";\n            break;\n            default:\n                this.transformOptions = \"scale(0.7)\";\n            break;\n        }\n    }\n\n    @ContentChild(Footer) footer;\n\n    @ViewChild('content') contentViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'footerTemplate':\n                    this.footerTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    footerTemplate: TemplateRef<any>;\n\n    confirmation: Confirmation;\n\n    _visible: boolean;\n\n    maskVisible: boolean;\n\n    documentEscapeListener: any;\n\n    container: HTMLDivElement;\n\n    wrapper: HTMLElement;\n\n    contentContainer: HTMLDivElement;\n\n    subscription: Subscription;\n\n    maskClickListener: Function;\n\n    preWidth: number;\n\n    _position: string = \"center\";\n\n    transformOptions: any = \"scale(0.7)\";\n\n    confirmationOptions: Confirmation;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private confirmationService: ConfirmationService, public zone: NgZone, private cd: ChangeDetectorRef) {\n        this.subscription = this.confirmationService.requireConfirmation$.subscribe(confirmation => {\n            if (!confirmation) {\n                this.hide();\n                return;\n            }\n\n            if (confirmation.key === this.key) {\n                this.confirmation = confirmation;\n                this.confirmationOptions = {\n                    message: this.confirmation.message||this.message,\n                    icon: this.confirmation.icon||this.icon,\n                    header: this.confirmation.header||this.header,\n                    rejectVisible: this.confirmation.rejectVisible == null ? this.rejectVisible : this.confirmation.rejectVisible,\n                    acceptVisible: this.confirmation.acceptVisible == null ? this.acceptVisible : this.confirmation.acceptVisible,\n                    acceptLabel: this.confirmation.acceptLabel||this.acceptLabel,\n                    rejectLabel: this.confirmation.rejectLabel||this.rejectLabel,\n                    acceptIcon: this.confirmation.acceptIcon || this.acceptIcon,\n                    rejectIcon: this.confirmation.rejectIcon || this.rejectIcon,\n                    acceptButtonStyleClass: this.confirmation.acceptButtonStyleClass || this.acceptButtonStyleClass,\n                    rejectButtonStyleClass: this.confirmation.rejectButtonStyleClass || this.rejectButtonStyleClass,\n                    defaultFocus: this.confirmation.defaultFocus || this.defaultFocus,\n                    blockScroll: (this.confirmation.blockScroll === false || this.confirmation.blockScroll === true) ? this.confirmation.blockScroll : this.blockScroll,\n                    closeOnEscape: (this.confirmation.closeOnEscape === false || this.confirmation.closeOnEscape === true) ? this.confirmation.closeOnEscape : this.closeOnEscape,\n                    dismissableMask: (this.confirmation.dismissableMask === false || this.confirmation.dismissableMask === true) ? this.confirmation.dismissableMask : this.dismissableMask\n                };\n\n                if (this.confirmation.accept) {\n                    this.confirmation.acceptEvent = new EventEmitter();\n                    this.confirmation.acceptEvent.subscribe(this.confirmation.accept);\n                }\n\n                if (this.confirmation.reject) {\n                    this.confirmation.rejectEvent = new EventEmitter();\n                    this.confirmation.rejectEvent.subscribe(this.confirmation.reject);\n                }\n\n                this.visible = true;\n            }\n        });\n    }\n\n    option(name: string) {\n        const source = this.confirmationOptions || this;\n        if (source.hasOwnProperty(name)) {\n            return source[name];\n        }\n        return undefined;\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                this.container = event.element;\n                this.wrapper = this.container.parentElement;\n                this.contentContainer = DomHandler.findSingle(this.container, '.p-dialog-content');\n\n                const element = this.getElementToFocus();\n                if (element) {\n                    element.focus();\n                }\n\n                this.appendContainer();\n                this.moveOnTop();\n                this.bindGlobalListeners();\n                this.enableModality();\n            break;\n        }\n    }\n\n    onAnimationEnd(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    getElementToFocus() {\n        switch(this.option('defaultFocus')) {\n            case 'accept':\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n\n            case 'reject':\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-reject');\n\n            case 'close':\n                return DomHandler.findSingle(this.container, '.p-dialog-header-close');\n\n            case 'none':\n                return null;\n\n            //backward compatibility\n            default:\n                return DomHandler.findSingle(this.container, '.p-confirm-dialog-accept');\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.wrapper);\n            else\n                DomHandler.appendChild(this.wrapper, this.appendTo);\n        }\n    }\n\n    restoreAppend() {\n        if (this.wrapper && this.appendTo) {\n            this.el.nativeElement.appendChild(this.wrapper);\n        }\n    }\n\n    enableModality() {\n        if (this.option('blockScroll')) {\n            DomHandler.addClass(document.body, 'p-overflow-hidden');\n        }\n\n        if (this.option('dismissableMask')) {\n            this.maskClickListener = this.renderer.listen(this.wrapper, 'mousedown', (event: any) => {\n                if (this.wrapper && this.wrapper.isSameNode(event.target)) {\n                    this.close(event);\n                }\n            });\n        }\n    }\n\n    disableModality() {\n        this.maskVisible = false;\n\n        if (this.option('blockScroll')) {\n            DomHandler.removeClass(document.body, 'p-overflow-hidden');\n        }\n\n        if (this.dismissableMask) {\n            this.unbindMaskClickListener();\n        }\n\n        if (this.container && !this.cd['destroyed']) {\n            this.cd.detectChanges();\n        }\n    }\n\n    close(event: Event) {\n        if (this.confirmation && this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n\n        this.hide();\n        event.preventDefault();\n    }\n\n    hide() {\n        this.visible = false;\n        this.confirmation = null;\n        this.confirmationOptions = null;\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n            this.wrapper.style.zIndex = String(this.baseZIndex + (DomHandler.zindex - 1));\n        }\n    }\n\n    getMaskClass() {\n        let maskClass = {'p-dialog-mask p-component-overlay': true, 'p-dialog-mask-scrollblocker': this.blockScroll};\n        maskClass[this.getPositionClass().toString()] = true;\n        return maskClass;\n    }\n\n    getPositionClass() {\n        const positions = ['left', 'right', 'top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right'];\n        const pos = positions.find(item => item === this.position);\n\n        return pos ? `p-dialog-${pos}` : '';\n    }\n\n    bindGlobalListeners() {\n        if ((this.option('closeOnEscape') && this.closable) || this.focusTrap && !this.documentEscapeListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', (event) => {\n                if (event.which == 27 && (this.option('closeOnEscape') && this.closable)) {\n                    if (parseInt(this.container.style.zIndex) === (DomHandler.zindex + this.baseZIndex) && this.visible) {\n                        this.close(event);\n                    }\n                }\n\n                if (event.which === 9 && this.focusTrap) {\n                    event.preventDefault();\n\n                    let focusableElements = DomHandler.getFocusableElements(this.container);\n\n                    if (focusableElements && focusableElements.length > 0) {\n                        if (!focusableElements[0].ownerDocument.activeElement) {\n                            focusableElements[0].focus();\n                        }\n                        else {\n                            let focusedIndex = focusableElements.indexOf(focusableElements[0].ownerDocument.activeElement);\n\n                            if (event.shiftKey) {\n                                if (focusedIndex == -1 || focusedIndex === 0)\n                                    focusableElements[focusableElements.length - 1].focus();\n                                else\n                                    focusableElements[focusedIndex - 1].focus();\n                            }\n                            else {\n                                if (focusedIndex == -1 || focusedIndex === (focusableElements.length - 1))\n                                    focusableElements[0].focus();\n                                else\n                                    focusableElements[focusedIndex + 1].focus();\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    unbindGlobalListeners() {\n        if (this.documentEscapeListener) {\n            this.documentEscapeListener();\n            this.documentEscapeListener = null;\n        }\n    }\n\n    unbindMaskClickListener() {\n        if (this.maskClickListener) {\n            this.maskClickListener();\n            this.maskClickListener = null;\n        }\n    }\n\n    onOverlayHide() {\n        this.disableModality();\n        this.unbindGlobalListeners();\n        this.container = null;\n    }\n\n    ngOnDestroy() {\n        this.restoreAppend();\n        this.onOverlayHide();\n        this.subscription.unsubscribe();\n    }\n\n    accept() {\n        if (this.confirmation && this.confirmation.acceptEvent) {\n            this.confirmation.acceptEvent.emit();\n        }\n\n        this.hide();\n    }\n\n    reject() {\n        if (this.confirmation.rejectEvent) {\n            this.confirmation.rejectEvent.emit();\n        }\n\n        this.hide();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule],\n    exports: [ConfirmDialog,ButtonModule,SharedModule],\n    declarations: [ConfirmDialog]\n})\nexport class ConfirmDialogModule { }\n"]}