{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/treetable/treetable.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TreeTableService","this","sortSource","Subject","selectionSource","contextMenuSource","uiUpdateSource","totalRecordsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","uiUpdateSource$","totalRecordsSource$","prototype","onSort","sortMeta","onSelectionChange","onContextMenu","node","onUIUpdate","onTotalRecordsChange","Injectable","TreeTable","el","zone","tableService","lazy","lazyLoadOnInit","first","pageLinks","alwaysShowPaginator","paginatorPosition","currentPageReportTemplate","showFirstLastIcon","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","compareSelectionBy","loadingIcon","showLoader","virtualScrollDelay","virtualRowHeight","columnResizeMode","rowTrackBy","index","item","filters","filterDelay","filterMode","onFilter","onNodeExpand","onNodeCollapse","onPage","onLazyLoad","sortFunction","onColResize","onColReorder","onNodeSelect","onNodeUnselect","onContextMenuSelect","onHeaderCheckboxToggle","onEditInit","onEditComplete","onEditCancel","_value","_totalRecords","_sortOrder","selectionKeys","ngOnInit","emit","createLazyLoadMetadata","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","ngOnChanges","simpleChange","currentValue","totalRecords","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","updateSerializedValue","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","defineProperty","val","serializedValue","paginator","serializePageNodes","serializeNodes","filteredNodes","parent","nodes","level","visible","nodes_1","nodes_1_1","rowNode","expanded","children","data","rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","scrollable","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","sortNodes","customSort","mode","node1","node2","value1","value2","result","localeCompare","undefined","numeric","nodes_2","nodes_2_1","sortMultipleNodes","multisortmeta","multisortField","nodes_3","nodes_3_1","isSorted","sorted","globalFilter","virtualScroll","scrollToVirtualIndex","scrollTo","top","scrollableViewChild","scrollableFrozenViewChild","options","isEmpty","getBlockableElement","nativeElement","onColumnResizeBegin","containerLeft","DomHandler","getOffset","containerViewChild","left","lastResizerHelperX","pageX","scrollLeft","preventDefault","onColumnResize","addClass","resizeHelperViewChild","style","height","offsetHeight","display","onColumnResizeEnd","column","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","scrollableBody_1","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","tableViewChild","containerWidth","element","removeClass","parentElement","hasClass","colGroup","nodeName","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","reorderableColumns","containerOffset","dropHeaderOffset","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","dragIndex","indexWithinGroup","dropIndex","allowDrop","reorderArray","columns","draggable","handleRowClick","targetNode","target","selectionMode","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","isMultipleSelectionMode","rowIndex","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","toggleNodeWithCheckbox","propagateSelectionDown","propagateSelectionUp","toggleNodesWithCheckbox","check","slice","data_1","data_1_1","checked","select","selectedChildCount","childPartialSelected","child","partialSelected","index_1","equals","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","isStrictMode","isValueChanged","copyNode","assign","localMatch","globalMatch","paramsWithoutNode","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","filterConstraint","FilterUtils","findFilteredNodes","isFilterMatched","j","copyNodeForGlobal","matches","filteredValue","matched","childNodes","childNodes_1","childNodes_1_1","childNode","copyChildNode","_a","filterLocale","isNodeLeaf","leaf","empty","reset","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","unbindDocumentEditListener","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","providers","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TTBody","tt","treeTableService","cd","subscription","subscribe","detectChanges","unsubscribe","ChangeDetectorRef","TTScrollableView","_scrollHeight","includes","console","log","virtualScrollBody","ngAfterViewInit","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenColumns","frozenView","previousElementSibling","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","bindEvents","runOutsideAngular","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","scrollToIndex","CdkVirtualScrollViewport","TTSortableColumn","isEnabled","updateSortState","onClick","clearSelection","onEnterKey","ttSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","HostListener","TTSortIcon","markForCheck","changeDetection","ChangeDetectionStrategy","OnPush","TTResizableColumn","resizer","createElement","className","appendChild","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","ttResizableColumnDisabled","TTReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","ttReorderableColumnDisabled","TTSelectableRow","which","onTouchEnd","ttSelectableRowDisabled","TTSelectableRowDblClick","TTContextMenuRow","focus","ttContextMenuRowDisabled","[class.p-highlight-contextmenu]","TTCheckbox","disabled","onFocus","boxViewChild","onBlur","TTHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","data_2","data_2_1","TTEditableColumn","openCell","focusable","closeEditingCell","onKeyDown","keyCode","shiftKey","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","nextRow","firstElementChild","ttEditableColumnDisabled","TreeTableCellEditor","editableColumn","inputTemplate","outputTemplate","TTRow","prevRow","toggleRowIndex","restoreFocus","row","TreeTableToggler","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","RippleModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { NgModule, AfterContentInit, OnInit, OnDestroy, HostListener, Injectable, Directive, Component, Input, Output, EventEmitter, ContentChildren, TemplateRef, QueryList, ElementRef, NgZone, ViewChild, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TreeNode } from 'primeng-lts/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { DomHandler } from 'primeng-lts/dom';\nimport { PaginatorModule } from 'primeng-lts/paginator';\nimport { PrimeTemplate, SharedModule } from 'primeng-lts/api';\nimport { SortMeta } from 'primeng-lts/api';\nimport { BlockableUI } from 'primeng-lts/api';\nimport { FilterMetadata } from 'primeng-lts/api';\nimport { ObjectUtils } from 'primeng-lts/utils';\nimport { FilterUtils } from 'primeng-lts/utils';\nimport { RippleModule } from 'primeng-lts/ripple';\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\n\n@Injectable()\nexport class TreeTableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private uiUpdateSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    uiUpdateSource$ = this.uiUpdateSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(node: any) {\n        this.contextMenuSource.next(node);\n    }\n\n    onUIUpdate(value: any) {\n        this.uiUpdateSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n}\n\n@Component({\n    selector: 'p-treeTable',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-treetable-scrollable-body\"\n                [ngClass]=\"{'p-treetable p-component': true,\n                'p-treetable-hoverable-rows': (rowHover||(selectionMode === 'single' || selectionMode === 'multiple')),\n                'p-treetable-auto-layout': autoLayout,\n                'p-treetable-resizable': resizableColumns,\n                'p-treetable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'p-treetable-flex-scrollable': (scrollable && scrollHeight === 'flex')}\">\n            <div class=\"p-treetable-loading\" *ngIf=\"loading && showLoader\">\n                <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-treetable-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"p-treetable-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n\n            <div class=\"p-treetable-wrapper\" *ngIf=\"!scrollable\">\n                <table #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"p-treetable-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"p-treetable-scrollable-view p-treetable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [ttScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"p-treetable-scrollable-view\" #scrollableView [ttScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div *ngIf=\"summaryTemplate\" class=\"p-treetable-footer\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-treetable-reorder-indicator-up\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-treetable-reorder-indicator-down\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TreeTableService],\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./treetable.css']\n})\nexport class TreeTable implements AfterContentInit, OnInit, OnDestroy, BlockableUI, OnChanges {\n\n    @Input() columns: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() tableStyle: any;\n\n    @Input() tableStyleClass: string;\n\n    @Input() autoLayout: boolean;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() first: number = 0;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showJumpToPageDropdown: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() showPageLinks: boolean = true;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n\n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() customSort: boolean;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() rowHover: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() frozenWidth: string;\n\n    @Input() frozenColumns: any[];\n\n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() contextMenu: any;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterLocale: string;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table') tableViewChild: ElementRef;\n\n    @ViewChild('scrollableView') scrollableViewChild;\n\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: TreeNode[] = [];\n\n    serializedValue: any[];\n\n    _totalRecords: number = 0;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    filteredNodes: any[];\n\n    filterTimeout: any;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    dropPosition: number;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    selectionKeys: any = {};\n\n    rowTouched: boolean;\n\n    editingCell: Element;\n\n    editingCellClick: boolean;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    documentEditListener: any;\n\n    initialized: boolean;\n\n    toggleRowIndex: number;\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TreeTableService) {}\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this._value = simpleChange.value.currentValue;\n\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n\n            this.updateSerializedValue();\n            this.tableService.onUIUpdate(this.value);\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n\n        if (this.paginator)\n            this.serializePageNodes();\n        else\n            this.serializeNodes(null, this.filteredNodes||this.value, 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    serializePageNodes() {\n        let data = this.filteredNodes || this.value;\n        this.serializedValue = [];\n        if (data && data.length) {\n            const first = this.lazy ? 0 : this.first;\n\n            for(let i = first; i < (first + this.rows); i++) {\n                let node = data[i];\n                if (node) {\n                    this.serializedValue.push({\n                        node: node,\n                        parent: null,\n                        level: 0,\n                        visible: true\n                    });\n\n                    this.serializeNodes(node, node.children, 1, true);\n                }\n            }\n        }\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;\n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let node of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(node.data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection.data, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy)\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        else\n            this.serializePageNodes();\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n\n        this.tableService.onUIUpdate(this.value);\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort && this.scrollable) {\n                this.resetScrollTop();\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n\n                    if (this.resetPageOnSort && this.scrollable) {\n                        this.resetScrollTop();\n                    }\n                }\n                this.multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n\n            this.sortMultiple();\n        }\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                this.sortNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n            this.updateSerializedValue();\n        }\n    }\n\n    sortNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: nodes,\n                mode: this.sortMode,\n                field: this.sortField,\n                order: this.sortOrder\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                let value1 = ObjectUtils.resolveFieldData(node1.data, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(node2.data, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, {numeric: true});\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortNodes(node.children);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n               this.sortMultipleNodes(this.value);\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.updateSerializedValue();\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    sortMultipleNodes(nodes) {\n        if (!nodes || nodes.length === 0) {\n            return;\n        }\n\n        if (this.customSort) {\n            this.sortFunction.emit({\n                data: this.value,\n                mode: this.sortMode,\n                multiSortMeta: this.multiSortMeta\n            });\n        }\n        else {\n            nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, this.multiSortMeta, 0);\n            });\n        }\n\n        for(let node of nodes) {\n            this.sortMultipleNodes(node.children);\n        }\n    }\n\n    multisortField(node1, node2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(node1.data, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(node2.data, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2, undefined, {numeric: true}));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public resetScrollTop() {\n        if (this.virtualScroll)\n            this.scrollToVirtualIndex(0);\n        else\n            this.scrollTo({top: 0});\n    }\n\n    public scrollToVirtualIndex(index: number) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollToVirtualIndex(index);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\n        }\n    }\n\n    public scrollTo(options) {\n        if (this.scrollableViewChild) {\n            this.scrollableViewChild.scrollTo(options);\n        }\n\n        if (this.scrollableFrozenViewChild) {\n            this.scrollableFrozenViewChild.scrollTo(options);\n        }\n    }\n\n    isEmpty() {\n        let data = this.filteredNodes||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let newColumnWidth = columnWidth + delta;\n        let minWidth = column.style.minWidth || 15;\n\n        if (columnWidth + delta > parseInt(minWidth)) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-treetable-virtual-scrollable-body table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (this.scrollable) {\n                    let scrollableView = this.findParentScrollableView(column);\n                    let scrollableBody = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\n                    let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-header');\n                    let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-footer');\n                    let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-treetable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\n                    let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-header-table');\n                    let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-treetable-scrollable-footer-table');\n                    scrollableBodyTable.style.width = scrollableBodyTable.offsetWidth + delta + 'px';\n                    scrollableHeaderTable.style.width = scrollableHeaderTable.offsetWidth + delta + 'px';\n                    if (scrollableFooterTable) {\n                        scrollableFooterTable.style.width = scrollableFooterTable.offsetWidth + delta + 'px';\n                    }\n                    let resizeColumnIndex = DomHandler.index(column);\n\n                    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n                    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n                    const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n                    let setWidth = (container, table, width, isContainerInViewport) => {\n                        if (container && table) {\n                            container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                            table.style.width = width + 'px';\n                        }\n                    };\n\n                    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n                    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n                    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n                    this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n                    this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                    column.style.width = newColumnWidth + 'px';\n                    let containerWidth = this.tableViewChild.nativeElement.style.width;\n                    this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'p-treetable-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'ttreorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'ttreorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    handleRowClick(event) {\n        let targetNode = (<HTMLElement> event.originalEvent.target).nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            let rowNode = event.rowNode;\n            let selected = this.isSelected(rowNode.node);\n            let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowNode.node.data, this.dataKey)) : null;\n\n            if (metaSelection) {\n                let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n\n                if (selected && metaKey) {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(null);\n                    }\n                    else {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val,i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n\n                    this.onNodeUnselect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row'});\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(rowNode.node);\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        if (metaKey) {\n                            this._selection = this.selection||[];\n                        }\n                        else {\n                            this._selection = [];\n                            this.selectionKeys = {};\n                        }\n\n                        this._selection = [...this.selection, rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n\n                    this.onNodeSelect.emit({originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex});\n                }\n            }\n            else {\n                if (this.selectionMode === 'single') {\n                    if (selected) {\n                        this._selection = null;\n                        this.selectionKeys = {};\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                    }\n                    else {\n                        this._selection = rowNode.node;\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys = {};\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n                else if (this.selectionMode === 'multiple') {\n                    if (selected) {\n                        let selectionIndex = this.findIndexInSelection(rowNode.node);\n                        this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeUnselect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row' });\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                    else {\n                        this._selection = this.selection ? [...this.selection, rowNode.node] : [rowNode.node];\n                        this.selectionChange.emit(this.selection);\n                        this.onNodeSelect.emit({ originalEvent: event.originalEvent, node: rowNode.node, type: 'row', index: event.rowIndex });\n                        if (dataKeyValue) {\n                            this.selectionKeys[dataKeyValue] = 1;\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const node = event.rowNode.node;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = node;\n                this.contextMenuSelectionChange.emit(node);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(node);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(node);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = node;\n                        this.selectionChange.emit(node);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [node];\n                        this.selectionChange.emit(this.selection);\n                    }\n\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, node: node});\n            }\n        }\n    }\n\n    toggleNodeWithCheckbox(event) {\n        this.selection = this.selection||[];\n        this.preventSelectionSetterPropagation = true;\n        let node = event.rowNode.node;\n        let selected = this.isSelected(node);\n\n        if (selected) {\n            this.propagateSelectionDown(node, false);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, false);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeUnselect.emit({originalEvent: event, node: node});\n        }\n        else {\n            this.propagateSelectionDown(node, true);\n            if (event.rowNode.parent) {\n                this.propagateSelectionUp(node.parent, true);\n            }\n            this.selectionChange.emit(this.selection);\n            this.onNodeSelect.emit({originalEvent: event, node: node});\n        }\n\n        this.tableService.onSelectionChange();\n    }\n\n    toggleNodesWithCheckbox(event: Event, check: boolean) {\n        let data = this.filteredNodes || this.value;\n        this._selection = check && data ? data.slice() : [];\n        if (check) {\n            if (data && data.length) {\n                for (let node of data) {\n                    this.propagateSelectionDown(node, true);\n                }\n            }\n        }\n        else {\n            this._selection = [];\n            this.selectionKeys = {};\n        }\n\n        this.preventSelectionSetterPropagation = true;\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n    }\n\n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedChildCount: number = 0;\n            let childPartialSelected: boolean = false;\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n            for (let child of node.children) {\n                if (this.isSelected(child))\n                selectedChildCount++;\n                else if (child.partialSelected)\n                    childPartialSelected = true;\n            }\n\n            if (select && selectedChildCount == node.children.length) {\n                this._selection =  [...this.selection||[], node];\n                node.partialSelected = false;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this._selection =  this.selection.filter((val,i) => i!=index);\n\n                        if (dataKeyValue) {\n                            delete this.selectionKeys[dataKeyValue];\n                        }\n                    }\n                }\n\n                if (childPartialSelected || selectedChildCount > 0 && selectedChildCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n\n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(node.data, this.dataKey)) : null;\n\n        if (select && index == -1) {\n            this._selection =  [...this.selection||[],node]\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        else if (!select && index > -1) {\n            this._selection =  this.selection.filter((val,i) => i!=index);\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n\n        node.partialSelected = false;\n\n        if (node.children && node.children.length) {\n            for (let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node) {\n        if (node && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(node.data, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(node) > -1;\n                else\n                    return this.equals(node, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(node: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(node, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    equals(node1, node2) {\n        return this.compareSelectionBy === 'equals' ? (node1 === node2) : ObjectUtils.equals(node1.data, node2.data, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredNodes = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n\n                this.filteredNodes = [];\n                const isStrictMode = this.filterMode === 'strict';\n                let isValueChanged = false;\n\n                for (let node of this.value) {\n                    let copyNode = {...node};\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let paramsWithoutNode;\n\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n                            if ((isStrictMode && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                                (!isStrictMode && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                    localMatch = false;\n                            }\n\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let copyNodeForGlobal = {...copyNode};\n                            let filterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            let filterValue = this.filters['global'].value;\n                            let filterConstraint = FilterUtils[this.filters['global'].matchMode];\n                            paramsWithoutNode = {filterField, filterValue, filterConstraint, isStrictMode};\n\n                            if ((isStrictMode && (this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode))) ||\n                                (!isStrictMode && (this.isFilterMatched(copyNodeForGlobal, paramsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, paramsWithoutNode)))) {\n                                    globalMatch = true;\n                                    copyNode = copyNodeForGlobal;\n                            }\n                        }\n                    }\n\n                    let matches = localMatch;\n                    if (this.filters['global']) {\n                        matches = localMatch && globalMatch;\n                    }\n\n                    if (matches) {\n                        this.filteredNodes.push(copyNode);\n                    }\n\n                    isValueChanged = isValueChanged || !localMatch || globalMatch || (localMatch && this.filteredNodes.length > 0) || (!globalMatch && this.filteredNodes.length === 0)\n                }\n\n                if (!isValueChanged) {\n                    this.filteredNodes = null;\n                }\n\n                if (this.paginator) {\n                    this.totalRecords = this.filteredNodes ? this.filteredNodes.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.first = 0;\n\n        const filteredValue = this.filteredNodes || this.value;\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: filteredValue\n        });\n\n        this.tableService.onUIUpdate(filteredValue);\n        this.updateSerializedValue();\n\n        if (this.scrollable) {\n            this.resetScrollTop();\n        }\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {filterField, filterValue, filterConstraint, isStrictMode}) {\n        let matched = false;\n        let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n        if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n            matched = true;\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf === false ? false : !(node.children && node.children.length);\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = 1;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n\n        this.filteredNodes = null;\n        this.filters = {};\n\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.editingCellField = null;\n        this.editingCellData = null;\n        this.initialized = null;\n    }\n\n}\n\n@Component({\n    selector: '[pTreeTableBody]',\n    template: `\n        <ng-container *ngIf=\"!tt.virtualScroll\">\n            <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\" [ngForTrackBy]=\"tt.rowTrackBy\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.virtualScroll\">\n            <ng-template cdkVirtualFor let-serializedNode let-rowIndex=\"index\" [cdkVirtualForOf]=\"tt.serializedValue\" [cdkVirtualForTrackBy]=\"tt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\n                <ng-container *ngIf=\"serializedNode.visible\">\n                    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: serializedNode, node: serializedNode.node, rowData: serializedNode.node.data, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"tt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"tt.emptyMessageTemplate; context: {$implicit: columns}\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTBody {\n\n    @Input(\"pTreeTableBody\") columns: any[];\n\n    @Input(\"pTreeTableBodyTemplate\") template: TemplateRef<any>;\n\n    @Input() frozen: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public treeTableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            if (this.tt.virtualScroll) {\n                this.cd.detectChanges();\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: '[ttScrollableView]',\n    template: `\n        <div #scrollHeader class=\"p-treetable-scrollable-header\">\n            <div #scrollHeaderBox class=\"p-treetable-scrollable-header-box\">\n                <table class=\"p-treetable-scrollable-header-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"p-treetable-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenHeaderTemplate||tt.headerTemplate : tt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                </table>\n            </div>\n        </div>\n        <ng-container *ngIf=\"!tt.virtualScroll; else virtualScrollTemplate\">\n            <div #scrollBody class=\"p-treetable-scrollable-body\" [ngStyle]=\"{'max-height': tt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && tt.scrollHeight ? 'scroll' : undefined}\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </div>\n        </ng-container>\n        <ng-template #virtualScrollTemplate>\n            <cdk-virtual-scroll-viewport [itemSize]=\"tt.virtualRowHeight\" [style.height]=\"tt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                    [minBufferPx]=\"tt.minBufferPx\" [maxBufferPx]=\"tt.maxBufferPx\" class=\"p-treetable-virtual-scrollable-body\">\n                <table #scrollTable [class]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tbody class=\"p-treetable-tbody\" [pTreeTableBody]=\"columns\" [pTreeTableBodyTemplate]=\"frozen ? tt.frozenBodyTemplate||tt.bodyTemplate : tt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n                </table>\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            </cdk-virtual-scroll-viewport>\n        </ng-template>\n        <div #scrollFooter *ngIf=\"tt.footerTemplate\" class=\"p-treetable-scrollable-footer\">\n            <div #scrollFooterBox class=\"p-treetable-scrollable-footer-box\">\n                <table class=\"p-treetable-scrollable-footer-table\" [ngClass]=\"tt.tableStyleClass\" [ngStyle]=\"tt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenColGroupTemplate||tt.colGroupTemplate : tt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"p-treetable-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? tt.frozenFooterTemplate||tt.footerTemplate : tt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TTScrollableView implements AfterViewInit, OnDestroy {\n\n    @Input(\"ttScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable') scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\n\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\n\n    headerScrollListener;\n\n    bodyScrollListener;\n\n    footerScrollListener;\n\n    frozenSiblingBody: Element;\n\n    totalRecordsSubscription: Subscription;\n\n    _scrollHeight: string;\n\n    preventBodyScrollPropagation: boolean;\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\n        }\n\n        if (this.tt.virtualScroll && this.virtualScrollBody) {\n            this.virtualScrollBody.ngOnInit();\n        }\n    }\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.tt.frozenColumns || this.tt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'p-treetable-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                if (this.tt.virtualScroll)\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-virtual-scrollable-body');\n                else\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-treetable-scrollable-body');\n            }\n\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n        }\n\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderBoxViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n\n                if (this.tt.virtualScroll)\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\n                else\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n        }\n    }\n\n    onHeaderScroll() {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll() {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\n        }\n    }\n\n    scrollToVirtualIndex(index: number): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollToIndex(index);\n        }\n    }\n\n    scrollTo(options): void {\n        if (this.virtualScrollBody) {\n            this.virtualScrollBody.scrollTo(options);\n        }\n        else {\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n    }\n}\n\n@Directive({\n    selector: '[ttSortableColumn]',\n    host: {\n        '[class.p-sortable-column]': 'isEnabled()',\n        '[class.p-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"'\n    }\n})\nexport class TTSortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"ttSortableColumn\") field: string;\n\n    @Input() ttSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.tt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.updateSortState();\n            this.tt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.ttSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Component({\n    selector: 'p-treeTableSortIcon',\n    template: `\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTSortIcon implements OnInit, OnDestroy {\n\n    @Input() field: string;\n\n    @Input() ariaLabelDesc: string;\n\n    @Input() ariaLabelAsc: string;\n\n    subscription: Subscription;\n\n    sortOrder: number;\n\n    constructor(public tt: TreeTable, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.updateSortState();\n    }\n\n    onClick(event){\n        event.preventDefault();\n    }\n\n    updateSortState() {\n        if (this.tt.sortMode === 'single') {\n            this.sortOrder = this.tt.isSorted(this.field) ? this.tt.sortOrder : 0;\n        }\n        else if (this.tt.sortMode === 'multiple') {\n            let sortMeta = this.tt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[ttResizableColumn]'\n})\nexport class TTResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'p-column-resizer';\n            this.el.nativeElement.appendChild(this.resizer);\n\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: Event) {\n        this.tt.onColumnResizeBegin(event);\n        this.bindDocumentEvents();\n    }\n\n    onDocumentMouseMove(event: Event) {\n        this.tt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: Event) {\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.ttResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n\n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[ttReorderableColumn]'\n})\nexport class TTReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() ttReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.tt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.tt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.tt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.tt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.ttReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRow]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRow\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onEnterKey(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.onClick(event);\n        }\n    }\n\n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowTouchEnd(event);\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttSelectableRowDblClick]',\n    host: {\n        '[class.p-highlight]': 'selected'\n    }\n})\nexport class TTSelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"ttSelectableRowDblClick\") rowNode: any;\n\n    @Input() ttSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.tt.isSelected(this.rowNode.node);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.tt.isSelected(this.rowNode.node);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n    }\n\n    isEnabled() {\n        return this.ttSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[ttContextMenuRow]',\n    host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n    }\n})\nexport class TTContextMenuRow {\n\n    @Input(\"ttContextMenuRow\") rowNode: any;\n\n    @Input() ttContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private el: ElementRef) {\n        if (this.isEnabled()) {\n            this.subscription = this.tt.tableService.contextMenuSource$.subscribe((node) => {\n                this.selected = this.tt.equals(this.rowNode.node, node);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.tt.handleRowRightClick({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n\n            this.el.nativeElement.focus();\n\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.ttContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\n            <div class=\"p-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled':disabled}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':checked, 'pi-minus': rowNode.node.partialSelected}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input(\"value\") rowNode: any;\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, public cd: ChangeDetectorRef) {\n        this.subscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.tt.isSelected(this.rowNode.node);\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.tt.isSelected(this.rowNode.node);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.tt.toggleNodeWithCheckbox({\n                originalEvent: event,\n                rowNode: this.rowNode\n            });\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableHeaderCheckbox',\n    template: `\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event, cb.checked)\">\n            <div class=\"p-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"!tt.value||tt.value.length === 0\">\n            </div>\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\n                'p-highlight':checked, 'p-disabled': (!tt.value || tt.value.length === 0)}\"  role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TTHeaderCheckbox  {\n\n    @ViewChild('box') boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    disabled: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public tt: TreeTable, public tableService: TreeTableService, private cd: ChangeDetectorRef) {\n        this.valueChangeSubscription = this.tt.tableService.uiUpdateSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.tt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event, checked) {\n        if (this.tt.value && this.tt.value.length > 0) {\n            this.tt.toggleNodesWithCheckbox(event, !checked);\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        this.cd.markForCheck();\n        let checked: boolean;\n        const data = this.tt.filteredNodes||this.tt.value;\n\n        if (data) {\n            for (let node of data) {\n                if (this.tt.isSelected(node)) {\n                    checked = true;\n                }\n                else  {\n                    checked = false;\n                    break;\n                }\n            }\n        }\n        else {\n            checked = false;\n        }\n\n        return checked;\n    }\n\n}\n\n@Directive({\n    selector: '[ttEditableColumn]'\n})\nexport class TTEditableColumn implements AfterViewInit {\n\n    @Input(\"ttEditableColumn\") data: any;\n\n    @Input(\"ttEditableColumnField\") field: any;\n\n    @Input() ttEditableColumnDisabled: boolean;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.tt.editingCellClick = true;\n\n            if (this.tt.editingCell) {\n                if (this.tt.editingCell !== this.el.nativeElement) {\n                    if (!this.tt.isEditingCellValid()) {\n                        return;\n                    }\n\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.tt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n        this.tt.onEditInit.emit({ field: this.field, data: this.data});\n        this.tt.editingCellClick = true;\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusable = DomHandler.findSingle(this.el.nativeElement, 'input, textarea');\n                if (focusable) {\n                    focusable.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.tt.editingCell, 'p-checkbox-icon');\n        this.tt.editingCell = null;\n        this.tt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.tt.isEditingCellValid()) {\n                    DomHandler.removeClass(this.tt.editingCell, 'p-cell-editing');\n                    this.closeEditingCell();\n                    this.tt.onEditCancel.emit({ field: this.field, data: this.data });\n                }\n\n                event.preventDefault();\n            }\n\n            //tab\n            else if (event.keyCode == 9) {\n                this.tt.onEditComplete.emit({ field: this.field, data: this.data });\n\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement ? cell.parentElement.previousElementSibling : null;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement ? cell.parentElement.nextElementSibling : null;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.ttEditableColumnDisabled !== true;\n    }\n\n}\n\n@Component({\n    selector: 'p-treeTableCellEditor',\n    template: `\n        <ng-container *ngIf=\"tt.editingCell === editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!tt.editingCell || tt.editingCell !== editableColumn.el.nativeElement\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableCellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public tt: TreeTable, public editableColumn: TTEditableColumn) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n}\n\n@Directive({\n    selector: '[ttRow]',\n    host: {\n        '[attr.tabindex]': '\"0\"'\n    }\n})\nexport class TTRow {\n\n    @Input('ttRow') rowNode: any;\n\n    constructor(public tt: TreeTable, public el: ElementRef, public zone: NgZone) {}\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        switch (event.which) {\n            //down arrow\n            case 40:\n                let nextRow = this.el.nativeElement.nextElementSibling;\n                if (nextRow) {\n                    nextRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //down arrow\n            case 38:\n                let prevRow = this.el.nativeElement.previousElementSibling;\n                if (prevRow) {\n                    prevRow.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = false;\n\n                    this.tt.onNodeCollapse.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.rowNode.node.expanded) {\n                    this.tt.toggleRowIndex = DomHandler.index(this.el.nativeElement);\n                    this.rowNode.node.expanded = true;\n\n                    this.tt.onNodeExpand.emit({\n                        originalEvent: event,\n                        node: this.rowNode.node\n                    });\n\n                    this.tt.updateSerializedValue();\n                    this.tt.tableService.onUIUpdate(this.tt.value);\n                    this.restoreFocus();\n                }\n            break;\n        }\n    }\n\n    restoreFocus() {\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let row = DomHandler.findSingle(this.tt.containerViewChild.nativeElement, '.p-treetable-tbody').children[this.tt.toggleRowIndex];\n                if (row) {\n                    row.focus();\n                }\n            }, 25);\n        });\n    }\n}\n\n@Component({\n    selector: 'p-treeTableToggler',\n    template: `\n        <button type=\"button\" class=\"p-treetable-toggler p-link\" (click)=\"onClick($event)\" tabindex=\"-1\" pRipple\n            [style.visibility]=\"rowNode.node.leaf === false || (rowNode.node.children && rowNode.node.children.length) ? 'visible' : 'hidden'\" [style.marginLeft]=\"rowNode.level * 16 + 'px'\">\n            <i [ngClass]=\"rowNode.node.expanded ? 'pi pi-fw pi-chevron-down' : 'pi pi-fw pi-chevron-right'\"></i>\n        </button>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TreeTableToggler {\n\n    @Input() rowNode: any;\n\n    constructor(public tt: TreeTable) {}\n\n    onClick(event: Event) {\n        this.rowNode.node.expanded = !this.rowNode.node.expanded;\n\n        if (this.rowNode.node.expanded) {\n            this.tt.onNodeExpand.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n        else {\n            this.tt.onNodeCollapse.emit({\n                originalEvent: event,\n                node: this.rowNode.node\n            });\n        }\n\n        this.tt.updateSerializedValue();\n        this.tt.tableService.onUIUpdate(this.tt.value);\n\n        event.preventDefault();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule,ScrollingModule,RippleModule],\n    exports: [TreeTable,SharedModule,TreeTableToggler,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor,ScrollingModule],\n    declarations: [TreeTable,TreeTableToggler,TTScrollableView,TTBody,TTSortableColumn,TTSortIcon,TTResizableColumn,TTRow,TTReorderableColumn,TTSelectableRow,TTSelectableRowDblClick,TTContextMenuRow,TTCheckbox,TTHeaderCheckbox,TTEditableColumn,TreeTableCellEditor]\n})\nexport class TreeTableModule { }\n"]}